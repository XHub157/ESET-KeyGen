name: ESET Key Generator

on:
  workflow_dispatch:
    inputs:
      mail:
        description: 'Mail provider'
        required: true
        type: choice
        options:
          - 1secmail
          - guerrillamail
          - developermail
          - mailticking
          - fakemail
          - inboxes
          - incognitomail
          - emailfake
        default: emailfake
      user_chat_id:
        description: 'Telegram chat ID'
        required: true

jobs:
  generate:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clone ESET-KeyGen
        shell: pwsh
        run: |
          git clone -b main https://github.com/XHub157/ESET-KeyGen
          cd ESET-KeyGen
          # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ñ–∞–π–ª—ã
          Remove-Item -Path .\*KEYS.txt -ErrorAction SilentlyContinue

      - name: Setup environment
        shell: pwsh
        run: |
          cd ESET-KeyGen
          python -m venv venv
          .\venv\Scripts\pip install -r requirements.txt

      - name: Generate keys
        id: generate
        shell: pwsh
        run: |
          cd ESET-KeyGen
          $output = .\venv\Scripts\python main.py --auto-detect-browser --key `
            --email-api "${{ inputs.mail }}" `
            --skip-update-check --no-logo `
            --disable-progress-bar --disable-logging *>&1
          
          # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–≤–æ–¥ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
          echo "output=$output" >> $env:GITHUB_OUTPUT
          
          # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          echo $output | Out-File -FilePath .\generation_output.txt

      - name: Find and send key
        shell: pwsh
        run: |
          cd ESET-KeyGen
          
          # –ò—â–µ–º –∫–ª—é—á –≤ –≤—ã–≤–æ–¥–µ
          $content = Get-Content -Path .\generation_output.txt -Raw -ErrorAction SilentlyContinue
          if (-not $content) {
            $content = "${{ steps.generate.outputs.output }}"
          }
          
          $pattern = 'License Key: (.+?)\s'
          $match = [regex]::Match($content, $pattern)
          
          if ($match.Success) {
            $licenseKey = $match.Groups[1].Value
            $MESSAGE = @"
          üîê *–í–∞—à –∫–ª—é—á ESET*
          
          üõ°Ô∏è –ü—Ä–æ–¥—É–∫—Ç: ESET Smart Security Premium
          üîë –ö–ª—é—á: `$licenseKey`
          "@
          } else {
            $MESSAGE = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª—é—á –≤ –≤—ã–≤–æ–¥–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"
            # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            echo "–ü–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞:"
            echo $content
          }
          
          curl.exe -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" `
            -d "chat_id=${{ inputs.user_chat_id }}" `
            -d "text=$MESSAGE" `
            -d "parse_mode=Markdown"
