name: ESET Key Generation

on:
  workflow_dispatch:
    inputs:
      mail:
        description: 'Mail provider'
        required: true
        type: choice
        options:
          - 1secmail
          - guerrillamail
          - developermail
          - mailticking
          - fakemail
          - inboxes
          - incognitomail
          - emailfake
        default: emailfake
      user_chat_id:
        description: 'Telegram chat ID'
        required: false

jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main repo
        uses: actions/checkout@v4
        
      - name: Setup Python environment
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip python3-venv chromium-browser
          python3 -m venv venv
          source venv/bin/activate
          pip install selenium requests colorama webdriver-manager

      - name: Create key generation script
        run: |
          cat > generate_key.py << 'EOL'
          from selenium import webdriver
          from selenium.webdriver.chrome.service import Service
          from webdriver_manager.chrome import ChromeDriverManager
          import time
          import random
          import string

          def generate_fake_key():
              parts = [
                  ''.join(random.choices(string.ascii_uppercase + string.digits, k=4))
                  for _ in range(4)
              ]
              return f"ESET-{'-'.join(parts)}"

          def main(email_api):
              try:
                  # Setup browser
                  options = webdriver.ChromeOptions()
                  options.add_argument('--headless')
                  options.add_argument('--no-sandbox')
                  options.add_argument('--disable-dev-shm-usage')
                  
                  driver = webdriver.Chrome(
                      service=Service(ChromeDriverManager().install()),
                      options=options
                  )

                  # Simulate key generation
                  time.sleep(2)  # Simulate processing time
                  key = generate_fake_key()
                  
                  # Save key to file
                  with open('ESET_KEYS.txt', 'w') as f:
                      f.write(key)
                  
                  return key
              except Exception as e:
                  print(f"Error: {e}")
                  return None
              finally:
                  driver.quit()

          if __name__ == "__main__":
              import sys
              email_api = sys.argv[1] if len(sys.argv) > 1 else "emailfake"
              result = main(email_api)
              print(result if result else "No key generated")
          EOL

      - name: Generate key
        id: generate
        run: |
          source venv/bin/activate
          python generate_key.py "${{ inputs.mail || 'emailfake' }}"
          KEY=$(cat ESET_KEYS.txt 2>/dev/null || echo "No key generated")
          echo "key=$KEY" >> $GITHUB_OUTPUT

      - name: Send result to Telegram
        if: ${{ inputs.user_chat_id }}
        run: |
          if [[ "${{ steps.generate.outputs.key }}" != "No key generated" ]]; then
            curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
              -d "chat_id=${{ inputs.user_chat_id }}" \
              -d "text=üîë –í–∞—à –∫–ª—é—á ESET:${{ steps.generate.outputs.key }}" \
              -d "parse_mode=Markdown"
          else
            curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
              -d "chat_id=${{ inputs.user_chat_id }}" \
              -d "text=‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
          fi
