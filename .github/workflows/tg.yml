name: ESET Key Generator

on:
  workflow_dispatch:
    inputs:
      mail:
        description: 'Mail provider'
        required: true
        type: choice
        options:
          - 1secmail
          - guerrillamail
          - developermail
          - mailticking
          - fakemail
          - inboxes
          - incognitomail
          - emailfake
        default: emailfake
      user_chat_id:
        description: 'Telegram chat ID'
        required: true

jobs:
  generate:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clone ESET-KeyGen
        shell: pwsh
        run: |
          git clone -b main https://github.com/XHub157/ESET-KeyGen
          cd ESET-KeyGen
          Remove-Item -Path .\*KEYS.txt -ErrorAction SilentlyContinue

      - name: Setup environment
        shell: pwsh
        run: |
          cd ESET-KeyGen
          python -m venv venv
          .\venv\Scripts\pip install -r requirements.txt

      - name: Generate keys
        id: generate
        shell: pwsh
        run: |
          cd ESET-KeyGen
          $outputFile = ".\output.txt"
          .\venv\Scripts\python main.py --auto-detect-browser --key `
            --email-api "${{ inputs.mail }}" `
            --skip-update-check --no-logo `
            --disable-progress-bar *>&1 > $outputFile
          
          # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å—Ç—Ä–æ–∫ –≤—ã–≤–æ–¥–∞
          $lastLines = Get-Content $outputFile | Select-Object -Last 30
          $content = $lastLines -join "`n"
          
          # –ò—â–µ–º –∫–ª—é—á –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
          $patterns = @(
              'License Key: ([A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4})',
              'License Key: ([A-Z0-9]{15})',
              'Key: ([A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4})'
          )
          
          $licenseKey = $null
          foreach ($pattern in $patterns) {
              $match = [regex]::Match($content, $pattern)
              if ($match.Success) {
                  $licenseKey = $match.Groups[1].Value
                  break
              }
          }
          
          if ($licenseKey) {
              echo "LICENSE_KEY=$licenseKey" >> $env:GITHUB_ENV
              echo "Found license key: $licenseKey"
          } else {
              echo "::error::License key not found in output"
              echo "Last 30 lines of output:"
              echo $content
              exit 1
          }

      - name: Send key to Telegram
        if: success()
        shell: pwsh
        run: |
          # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
          $messageText = "–í–∞—à –∫–ª—é—á ESET Smart Security Premium:`n`n<code>$env:LICENSE_KEY</code>`n`n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: $(Get-Date -Format 'dd.MM.yyyy')`n–ö–∞–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: @EsetForYou`n–ö–∞–Ω–∞–ª —Å–ø–æ–Ω—Å–æ—Ä–∞: @keys_eset2020"
          
          $url = "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"
          
          # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
          $replyMarkup = '{
            "inline_keyboard": [
              [
                {
                  "text": "–°–∫–∞–∑–∞—Ç—å —Å–ø–∞—Å–∏–±–æüôè",
                  "url": "https://t.me/+wnr6bruMFitmM2Zi"
                }
              ]
            ]
          }'
          
          $body = @{
              chat_id = "${{ inputs.user_chat_id }}"
              text = $messageText
              parse_mode = "HTML"
              reply_markup = $replyMarkup
          }
          
          try {
              $response = Invoke-RestMethod -Uri $url -Method Post -Body $body -ErrorAction Stop
              Write-Output "Message sent successfully: $($response.ok)"
          } catch {
              Write-Output "::error::Failed to send message: $_"
              exit 1
          }
