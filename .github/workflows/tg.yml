name: ESET Key Generator

on:
  workflow_dispatch:
    inputs:
      mail:
        description: 'Mail provider'
        required: true
        type: choice
        options:
          - 1secmail
          - guerrillamail
          - developermail
          - mailticking
          - fakemail
          - inboxes
          - incognitomail
          - emailfake
        default: emailfake
      user_chat_id:
        description: 'Telegram chat ID'
        required: true
    # Убраны все лишние параметры

jobs:
  generate:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clone ESET-KeyGen
        shell: pwsh
        run: |
          git clone -b main https://github.com/XHub157/ESET-KeyGen
          cd ESET-KeyGen
          Remove-Item -Path .\*KEYS.txt -ErrorAction SilentlyContinue

      - name: Setup environment
        shell: pwsh
        run: |
          cd ESET-KeyGen
          python -m venv venv
          .\venv\Scripts\pip install -r requirements.txt

      - name: Generate keys
        id: generate
        shell: pwsh
        run: |
          cd ESET-KeyGen
          $output = .\venv\Scripts\python main.py --auto-detect-browser --key `
            --email-api "${{ inputs.mail }}" `
            --skip-update-check --no-logo `
            --disable-progress-bar --disable-logging *>&1
          
          # Сохраняем вывод в переменную
          echo "output=$output" >> $env:GITHUB_OUTPUT
          
          # Дополнительно сохраняем в файл для отладки
          echo $output | Out-File -FilePath .\generation_output.txt

      - name: Extract and send key
        shell: pwsh
        run: |
         # Получаем вывод из предыдущего шага
         $content = "${{ steps.generate.outputs.output }}"
         
         # Проверяем, что вывод не пустой
         if ([string]::IsNullOrEmpty($content)) {
         Write-Output "::error::Вывод генератора пуст"
         exit 1
         }
         
         # Ищем ключ в выводе
         $keyMatch = [regex]::Match($content, 'License Key: ([A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4})')
         
         if ($keyMatch.Success) {
         # Формируем сообщение без emoji (чтобы избежать проблем с кодировкой)
         $messageText = "Ваш ключ ESET:`n`n$($keyMatch.Groups[1].Value)"
         } else {
         # Если ключ не найден, показываем часть вывода для отладки
         $messageText = "Ошибка: не удалось найти ключ в выводе. Последние 200 символов вывода:`n$($content.Substring([math]::Max(0, $content.Length - 200)))"
         }
         
         # Отправляем сообщение через curl
         $curlCommand = @"
         curl.exe -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" ^
         -d "chat_id=${{ inputs.user_chat_id }}" ^
         -d "text=$messageText" ^
         -d "parse_mode=Markdown"
         "@
         
         Invoke-Expression -Command $curlCommand
