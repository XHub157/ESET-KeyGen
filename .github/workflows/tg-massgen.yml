name: ESET Key Generator 10

on:
  workflow_dispatch:
    inputs:
      mail:
        description: 'Mail provider'
        required: true
        type: choice
        options:
          - 1secmail
          - guerrillamail
          - developermail
          - mailticking
          - fakemail
          - inboxes
          - incognitomail
          - emailfake
        default: emailfake
      key_count:
        description: 'Number of keys to generate (1-10)'
        required: true
        type: choice
        options:
           - 1
           - 2
           - 3
           - 4
           - 5
           - 6
           - 7
           - 8
           - 9
           - 10
        default: '10'
      user_chat_id:
        description: 'Telegram chat ID'
        required: true

jobs:
  generate:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clone ESET-KeyGen
        shell: pwsh
        run: |
          git clone -b main https://github.com/XHub157/ESET-KeyGen
          cd ESET-KeyGen
          Remove-Item -Path .\*KEYS.txt -ErrorAction SilentlyContinue

      - name: Setup environment
        shell: pwsh
        run: |
          cd ESET-KeyGen
          python -m venv venv
          .\venv\Scripts\pip install -r requirements.txt

      - name: Generate keys
        id: generate
        shell: pwsh
        run: |
          cd ESET-KeyGen
          $allKeys = @()
          $keyCount = ${{ inputs.key_count }}
          
          Write-Output "–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é $keyCount –∫–ª—é—á–µ–π..."
          
          # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π
          for ($i = 1; $i -le $keyCount; $i++) {
              Write-Output "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ #$i –∏–∑ $keyCount"
              
              $outputFile = ".\output_$i.txt"
              .\venv\Scripts\python main.py --auto-detect-browser --key `
                --email-api "${{ inputs.mail }}" `
                --skip-update-check --no-logo `
                --disable-progress-bar --disable-logging *>&1 > $outputFile
              
              # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å—Ç—Ä–æ–∫ –≤—ã–≤–æ–¥–∞
              $lastLines = Get-Content $outputFile | Select-Object -Last 30
              $content = $lastLines -join "`n"
              
              # –ò—â–µ–º –∫–ª—é—á –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
              $patterns = @(
                  'License Key: ([A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4})',
                  'License Key: ([A-Z0-9]{15})',
                  'Key: ([A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4})'
              )
              
              $licenseKey = $null
              foreach ($pattern in $patterns) {
                  $match = [regex]::Match($content, $pattern)
                  if ($match.Success) {
                      $licenseKey = $match.Groups[1].Value
                      break
                  }
              }
              
              if ($licenseKey) {
                  Write-Output "–ù–∞–π–¥–µ–Ω –∫–ª—é—á #$i : $licenseKey"
                  $allKeys += $licenseKey
              } else {
                  Write-Output "::warning::–ö–ª—é—á #$i –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤—ã–≤–æ–¥–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º..."
                  Write-Output "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å—Ç—Ä–æ–∫ –≤—ã–≤–æ–¥–∞:"
                  Write-Output $content
                  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π –≤–º–µ—Å—Ç–æ –≤—ã—Ö–æ–¥–∞
                  continue
              }
              
              # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏
              Start-Sleep -Seconds 2
          }
          
          # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∫–ª—é—á–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
          if ($allKeys.Count -gt 0) {
              $keysJson = $allKeys | ConvertTo-Json -Compress
              echo "ALL_KEYS=$keysJson" >> $env:GITHUB_ENV
              echo "TOTAL_KEYS=$($allKeys.Count)" >> $env:GITHUB_ENV
              echo "REQUESTED_KEYS=$keyCount" >> $env:GITHUB_ENV
              Write-Output "–£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∫–ª—é—á–µ–π: $($allKeys.Count) –∏–∑ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö $keyCount"
          } else {
              echo "::error::–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª—é—á–∞"
              exit 1
          }

      - name: Send keys to Telegram
        if: success()
        shell: pwsh
        run: |
          # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–∞—Å—Å–∏–≤
          $keysArray = $env:ALL_KEYS | ConvertFrom-Json
          $totalKeys = $env:TOTAL_KEYS
          $requestedKeys = $env:REQUESTED_KEYS
          
          # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –∫–ª—é—á–∞–º–∏
          if ($totalKeys -eq $requestedKeys) {
              $messageText = "‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ $totalKeys –∫–ª—é—á–µ–π ESET Smart Security Premium:`n`n"
          } else {
              $messageText = "‚ö†Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ $totalKeys –∏–∑ $requestedKeys –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π ESET:`n`n"
          }
          
          $counter = 1
          foreach ($key in $keysArray) {
              $messageText += "`<code>$key</code>`n"
              $counter++
          }
          
          $messageText += "`nüìÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: $(Get-Date -Format 'dd.MM.yyyy')`n"
          $messageText += "–°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞ @EsetgenBot."
          
          $url = "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"
          
          # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
          $replyMarkup = '{
            "inline_keyboard": [
              [
                {
                  "text": "üôè –°–∫–∞–∑–∞—Ç—å —Å–ø–∞—Å–∏–±–æ",
                  "url": "https://t.me/+wnr6bruMFitmM2Zi"
                }
              ]
            ]
          }'
          
          $body = @{
              chat_id = "${{ inputs.user_chat_id }}"
              text = $messageText
              parse_mode = "HTML"
              reply_markup = $replyMarkup
          }
          
          try {
              $response = Invoke-RestMethod -Uri $url -Method Post -Body $body -ErrorAction Stop
              Write-Output "–°–æ–æ–±—â–µ–Ω–∏–µ —Å $totalKeys –∫–ª—é—á–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!"
          } catch {
              Write-Output "::error::–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: $_"
              
              # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã–≤–æ–¥–∏–º –∫–ª—é—á–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ Telegram
              Write-Output "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏:"
              $keysArray | ForEach-Object { Write-Output "–ö–ª—é—á: $_" }
              
              exit 1
          }

      - name: Cleanup generated files
        if: always()
        shell: pwsh
        run: |
          cd ESET-KeyGen
          Remove-Item -Path .\output_*.txt -ErrorAction SilentlyContinue
          Write-Output "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã"
